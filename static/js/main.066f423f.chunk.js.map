{"version":3,"sources":["scripts/robots.js","scripts/ErrorBoundary.js","scripts/Components.js","scripts/App.js","serviceWorker.js","index.js"],"names":["robots","id","name","username","email","ErrorBoundary","state","hasError","this","setState","props","children","Component","Card","phone","className","src","alt","CardList","map","robot","key","SearchField","search","type","placeholder","onChange","Scroll","SearchType","select","value","App","onSearchChange","event","searchvalue","target","onTypeChange","searchtype","filterRobots","filter","toLowerCase","includes","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.066f423f.chunk.js","sourcesContent":["export const robots = [\r\n  {\r\n      id:1,\r\n      name: 'John Doe',\r\n      username: 'johndoe',\r\n      email: 'johndoe@email.com'\r\n  },\r\n  {\r\n      id:2,\r\n      name: 'Jane Doe',\r\n      username: 'janedoe',\r\n      email: 'janedoe@email.com'\r\n  },\r\n  {\r\n      id:3,\r\n      name: 'Mark Clatt',\r\n      username: 'markclatt',\r\n      email: 'markclatt@email.com'\r\n  },\r\n  {\r\n      id:4,\r\n      name: 'Steph Curie',\r\n      username: 'cursteph',\r\n      email: 'cursteph@email.com'\r\n  },\r\n  {\r\n      id:5,\r\n      name: 'Jac Ma',\r\n      username: 'jacmma',\r\n      email: 'jacmma@email.com'\r\n  },\r\n  {\r\n      id:6,\r\n      name: 'Xi Jao',\r\n      username: 'xijao',\r\n      email: 'xijao@cn.com'\r\n  },\r\n  {\r\n      id:7,\r\n      name: 'Rou Valdmir',\r\n      username: 'vroumir',\r\n      email: 'vroumir@ru.com'\r\n  },\r\n  {\r\n      id:8,\r\n      name: 'Winks Arr',\r\n      username: 'arrwinks',\r\n      email: 'arrwinks@email.co.uk'\r\n  },\r\n  {\r\n      id:9,\r\n      name: 'Switz Merri',\r\n      username: 'merriswtz',\r\n      email: 'merriswtz@mail.cz'\r\n  },\r\n  {\r\n      id:10,\r\n      name: 'Olu Banji',\r\n      username: 'baniolu',\r\n      email: 'baniolu@lag.ng'\r\n  },\r\n  \r\n];","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return(<h1>Ooops!</h1>)\r\n        } else {\r\n            return(this.props.children)\r\n        }\r\n    }\r\n} \r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport '../style/scroll.css';\r\n\r\nexport const Card =({name, email, id, phone})=> {\r\n    return(\r\n        <div className='tc bg-dark-green c1 pa1 ma1 br2 light-gray grow shadow-5 dib'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='' />\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n            <p>{phone}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const CardList =({robots})=> {\r\n    return(\r\n        <div>\r\n            {\r\n                robots.map(robot=>{\r\n                    return(\r\n                        <Card key={robot.id}\r\n                        name={robot.name}\r\n                        email={robot.email}\r\n                        phone={robot.phone}\r\n                        id={robot.id}\r\n        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const SearchField =({search})=> {\r\n    return(\r\n        <input type='search'\r\n        className='pa2 bg-lightest-blue ba br1 b--green ma1'\r\n        placeholder='Search'\r\n        onChange={search}\r\n        />\r\n    )\r\n}\r\n\r\nexport const Scroll =(props)=> {\r\n    return(\r\n        <div className='scroll'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const SearchType =({select})=> {\r\n    return(\r\n        <select onChange={select} \r\n        className='pa1 br1 ba' type='text'>\r\n            <option value='select'>Select</option>\r\n            <option value='name'>Name</option>\r\n            <option value='email'>Email</option>\r\n        </select>\r\n    )\r\n}","import React from 'react';\r\nimport {robots} from './robots';\r\nimport ErrorBoundary from './ErrorBoundary';\r\nimport {CardList, SearchField, Scroll, SearchType} from './Components';\r\nimport '../style/App.css';\r\n\r\nclass App extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots,\r\n            searchvalue:'',\r\n            searchtype:''\r\n        }\r\n    }\r\n/*\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users=> this.setState({robots:users}))\r\n    }\r\n*/\r\n\r\n    onSearchChange =(event)=> {\r\n        this.setState({searchvalue: event.target.value});\r\n    }\r\n\r\n    onTypeChange =(event)=> {\r\n        this.setState({searchtype: event.target.value})\r\n    }\r\n\r\n    render(){\r\n        const {robots, searchvalue, searchtype} = this.state;\r\n        const {onSearchChange, onTypeChange} = this;\r\n\r\n        if(!robots){\r\n            return <h1>Loading...</h1>\r\n        } else {\r\n            const filterRobots = robots.filter(\r\n                (robot)=>{\r\n                if(searchtype === 'name'){\r\n                    return robot.name.toLowerCase().includes(searchvalue)\r\n                } else if(searchtype === 'email'){\r\n                    return robot.email.toLowerCase().includes(searchvalue)\r\n                } return robot;         \r\n            }\r\n            )\r\n    \r\n            return(\r\n                <div className='tc'>\r\n                    <header>\r\n                        <h1 className='f1 grow'>Robot Friends</h1>\r\n                        <SearchType select={onTypeChange}/>\r\n                        <SearchField search={onSearchChange}/>\r\n                    </header>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filterRobots}/>  \r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                    <footer>&copy; nebnnamdi</footer>\r\n                </div>\r\n            )\r\n        }\r\n        }\r\n    \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './scripts/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}